name: ðŸŽ¨ Code Formatting & Auto-Fix

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  format-python:
    name: Format Python Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install formatters
        run: pip install black isort autopep8

      - name: Run Black formatter
        run: black .

      - name: Run isort (import sorting)
        run: isort .

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n $(git status -s) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.check_changes.outputs.changes == 'true' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "ðŸŽ¨ Format Python code with Black and isort"
          git push

      - name: Create PR comment
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸŽ¨ **Code Formatting**: Python code formatting issues detected. Run `black .` and `isort .` to fix.'
            });

  format-javascript:
    name: Format JavaScript/TypeScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run Prettier
        run: npx prettier --write "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n $(git status -s) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.check_changes.outputs.changes == 'true' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "ðŸŽ¨ Format JavaScript/TypeScript code with Prettier"
          git push

      - name: Create PR comment
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸŽ¨ **Code Formatting**: JavaScript/TypeScript formatting issues detected. Run `npx prettier --write .` to fix.'
            });

  format-go:
    name: Format Go Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run gofmt
        run: |
          cd go-tui
          gofmt -w .
          cd ..

      - name: Run goimports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          cd go-tui
          goimports -w .
          cd ..

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n $(git status -s) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.check_changes.outputs.changes == 'true' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "ðŸŽ¨ Format Go code with gofmt and goimports"
          git push
